(function() {
    var type_impls = Object.fromEntries([["erasable",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1539\">Source</a></span><a href=\"#impl-Clone-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1541\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/beta/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1563\">Source</a></span><a href=\"#impl-Debug-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1564\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ErasablePtr-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/erasable/lib.rs.html#635-646\">Source</a><a href=\"#impl-ErasablePtr-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"erasable/trait.ErasablePtr.html\" title=\"trait erasable::ErasablePtr\">ErasablePtr</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"erasable/trait.Erasable.html\" title=\"trait erasable::Erasable\">Erasable</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.erase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/erasable/lib.rs.html#639-641\">Source</a><a href=\"#method.erase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"erasable/trait.ErasablePtr.html#tymethod.erase\" class=\"fn\">erase</a>(this: Self) -&gt; <a class=\"type\" href=\"erasable/type.ErasedPtr.html\" title=\"type erasable::ErasedPtr\">ErasedPtr</a></h4></section></summary><div class='docblock'>Turn this erasable pointer into an erased pointer. <a href=\"erasable/trait.ErasablePtr.html#tymethod.erase\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unerase\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/erasable/lib.rs.html#643-645\">Source</a><a href=\"#method.unerase\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"erasable/trait.ErasablePtr.html#tymethod.unerase\" class=\"fn\">unerase</a>(this: <a class=\"type\" href=\"erasable/type.ErasedPtr.html\" title=\"type erasable::ErasedPtr\">ErasedPtr</a>) -&gt; Self</h4></section></summary><div class='docblock'>Unerase this erased pointer. <a href=\"erasable/trait.ErasablePtr.html#tymethod.unerase\">Read more</a></div></details></div></details>","ErasablePtr","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1634\">Source</a></span><a href=\"#impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1639\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&T>","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1623\">Source</a></span><a href=\"#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;mut T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1628\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&mut T>","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1607\">Source</a></span><a href=\"#impl-Hash-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1609\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/beta/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#166\">Source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.25.0\">1.25.0 (const: 1.25.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#193\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>ptr</code> must be non-null.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) };</code></pre></div>\n<p><em>Incorrect</em> usage of this function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// NEVER DO THAT!!! This is undefined behavior. ⚠️\n</span><span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::&lt;u32&gt;::new_unchecked(std::ptr::null_mut()) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.85.0\">1.25.0 (const: 1.85.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#229\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.new\" class=\"fn\">new</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.</p>\n<h5 id=\"panics-during-const-evaluation\"><a class=\"doc-anchor\" href=\"#panics-during-const-evaluation\">§</a>Panics during const evaluation</h5>\n<p>This method will panic during const evaluation if the pointer cannot be\ndetermined to be null or not. See <a href=\"../primitive.pointer.html#method.is_null-1\"><code>is_null</code></a> for more information.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ptr) = NonNull::&lt;u32&gt;::new(std::ptr::null_mut()) {\n    <span class=\"macro\">unreachable!</span>();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#241\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.from_ref\" class=\"fn\">from_ref</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_from_ref</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a reference to a <code>NonNull</code> pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#249\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.from_mut\" class=\"fn\">from_mut</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_from_ref</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a mutable reference to a <code>NonNull</code> pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#262-265\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    data_pointer: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;impl <a class=\"traitalias\" href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/traitalias.Thin.html\" title=\"traitalias core::ptr::metadata::Thin\">Thin</a>&gt;,\n    metadata: &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs the same functionality as <a href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a>, except that a\n<code>NonNull</code> pointer is returned, as opposed to a raw <code>*const</code> pointer.</p>\n<p>See the documentation of <a href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a> for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#279\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.unit.html\">()</a>&gt;, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/beta/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::from_raw_parts\"><code>NonNull::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#291\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>pointer::addr</code></a>.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#306\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new pointer with the given address and the <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of\n<code>self</code>.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>pointer::with_addr</code></a>.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0\">1.84.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#320\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.map_addr\" class=\"fn\">map_addr</a>(\n    self,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one, preserving the\n<a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#provenance\" title=\"mod core::ptr\">provenance</a> of <code>self</code>.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>pointer::map_addr</code></a>.</p>\n<p>This is a <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#strict-provenance\" title=\"mod core::ptr\">Strict Provenance</a> API.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.32.0\">1.25.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#346\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying <code>*mut</code> pointer.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">0</span>);\n\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() += <span class=\"number\">2</span>; }\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.73.0\">1.25.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#385\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>ref_x = <span class=\"kw\">unsafe </span>{ ptr.as_ref() };\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{ref_x}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.83.0\">1.25.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#423\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>\nmust be used instead.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>x_ref = <span class=\"kw\">unsafe </span>{ ptr.as_mut() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>x_ref += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.36.0\">1.27.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#447\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>casted_ptr = ptr.cast::&lt;i8&gt;();\n<span class=\"kw\">let </span>raw_ptr: <span class=\"kw-2\">*mut </span>i8 = casted_ptr.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#493-495\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an offset to a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The computed offset, <code>count * size_of::&lt;T&gt;()</code> bytes, must not overflow <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be derived from a pointer to some\n<a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: NonNull&lt;u32&gt; = NonNull::new(s.as_mut_ptr()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">1</span>).read());\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">2</span>).read());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#519\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/beta/core/primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#569-571\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds an offset to a pointer (convenience for <code>.offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The computed offset, <code>count * size_of::&lt;T&gt;()</code> bytes, must not overflow <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be derived from a pointer to some\n<a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#595\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for <code>.byte_offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.add\" title=\"method core::ptr::non_null::NonNull::add\"><code>add</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#646-648\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Subtracts an offset from a pointer (convenience for\n<code>.offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p>The computed offset, <code>count * size_of::&lt;T&gt;()</code> bytes, must not overflow <code>isize</code>.</p>\n</li>\n<li>\n<p>If the computed offset is non-zero, then <code>self</code> must be derived from a pointer to some\n<a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the entire memory range between <code>self</code> and the result must be in\nbounds of that allocated object. In particular, this range must not “wrap around” the edge\nof the address space.</p>\n</li>\n</ul>\n<p>Allocated objects can never be larger than <code>isize::MAX</code> bytes, so if the computed offset\nstays in bounds of the allocated object, it is guaranteed to satisfy the first requirement.\nThis implies, for instance, that <code>vec.as_ptr().add(vec.len())</code> (for <code>vec: Vec&lt;T&gt;</code>) is always\nsafe.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#677\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for\n<code>.byte_offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.sub\" title=\"method core::ptr::non_null::NonNull::sub\"><code>sub</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#775-777\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:</p>\n<ul>\n<li>\n<p><code>self</code> and <code>origin</code> must either</p>\n<ul>\n<li>point to the same address, or</li>\n<li>both be <em>derived from</em> a pointer to the same <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>, and the memory range between\nthe two pointers must be in bounds of that object. (See below for an example.)</li>\n</ul>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n</ul>\n<p>As a consequence, the absolute distance between the pointers, in bytes, computed on\nmathematical integers (without “wrapping around”), cannot overflow an <code>isize</code>. This is\nimplied by the in-bounds requirement, and the fact that no allocated object can be larger\nthan <code>isize::MAX</code> bytes.</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr1 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">0u8</span>))).unwrap();\n<span class=\"kw\">let </span>ptr2 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">1u8</span>))).unwrap();\n<span class=\"kw\">let </span>diff = (ptr2.addr().get() <span class=\"kw\">as </span>isize).wrapping_sub(ptr1.addr().get() <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2.add(1), but derived from ptr1.\n</span><span class=\"kw\">let </span>diff_plus_1 = diff.wrapping_add(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>ptr2_other = NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff_plus_1)).unwrap();\n<span class=\"macro\">assert_eq!</span>(ptr2.addr(), ptr2_other.addr());\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to addresses that are in-bounds of the same object!\n\n</span><span class=\"kw\">let </span>one = <span class=\"kw\">unsafe </span>{ ptr2_other.offset_from(ptr2) }; <span class=\"comment\">// Undefined Behavior! ⚠️</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#796\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.offset_from\" title=\"method core::ptr::non_null::NonNull::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#868-870\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.sub_ptr\" class=\"fn\">sub_ptr</a>(self, subtracted: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be though of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre></div>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#890\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.byte_sub_ptr\" class=\"fn\">byte_sub_ptr</a>&lt;U&gt;(self, origin: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers within the same allocation, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.sub_ptr\" title=\"method core::ptr::non_null::NonNull::sub_ptr\"><code>sub_ptr</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#905-907\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.read.html\" title=\"fn core::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#926-928\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.read_volatile.html\" title=\"fn core::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#946-948\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.read_unaligned.html\" title=\"fn core::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#966-968\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#986-988\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1006-1008\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.copy_from\" class=\"fn\">copy_from</a>(self, src: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1026-1028\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.copy_from_nonoverlapping\" class=\"fn\">copy_from_nonoverlapping</a>(\n    self,\n    src: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_in_place\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1041\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.drop_in_place\" class=\"fn\">drop_in_place</a>(self)</h4></section></summary><div class=\"docblock\"><p>Executes the destructor (if any) of the pointed-to value.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.drop_in_place.html\" title=\"fn core::ptr::drop_in_place\"><code>ptr::drop_in_place</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1056-1058\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.write\" class=\"fn\">write</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.write.html\" title=\"fn core::ptr::write\"><code>ptr::write</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1075-1077\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.write_bytes\" class=\"fn\">write_bytes</a>(self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.u8.html\">u8</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes memset on the specified pointer, setting <code>count * size_of::&lt;T&gt;()</code>\nbytes of memory starting at <code>self</code> to <code>val</code>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/intrinsics/fn.write_bytes.html\" title=\"fn core::intrinsics::write_bytes\"><code>ptr::write_bytes</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1096-1098\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.write_volatile\" class=\"fn\">write_volatile</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.write_volatile.html\" title=\"fn core::ptr::write_volatile\"><code>ptr::write_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.83.0\">1.80.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1116-1118\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.write_unaligned\" class=\"fn\">write_unaligned</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>Unlike <code>write</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.write_unaligned.html\" title=\"fn core::ptr::write_unaligned\"><code>ptr::write_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1132-1134\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.replace\" class=\"fn\">replace</a>(self, src: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the value at <code>self</code> with <code>src</code>, returning the old\nvalue, without dropping either.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.replace.html\" title=\"fn core::ptr::replace\"><code>ptr::replace</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.85.0\">1.80.0 (const: 1.85.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1150-1152\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.swap\" class=\"fn\">swap</a>(self, with: <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike <code>mem::swap</code> which is\notherwise equivalent.</p>\n<p>See <a href=\"https://doc.rust-lang.org/beta/core/ptr/fn.swap.html\" title=\"fn core::ptr::swap\"><code>ptr::swap</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1208-1210\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<p>When this is called during compile-time evaluation (which is unstable), the implementation\nmay return <code>usize::MAX</code> in cases where that can never happen at runtime. This is because the\nactual alignment of pointers is not known yet during compile-time, so an offset with\nguaranteed alignment can sometimes not be computed. For example, a buffer declared as <code>[u8; N]</code> might be allocated at an odd or an even address, but at compile-time this is not yet\nknown, so the execution has to be correct for either choice. It is therefore impossible to\nfind an offset that is guaranteed to be 2-aligned. (This behavior is subject to change, as usual\nfor unstable APIs.)</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = NonNull::new(x.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8).unwrap();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1242-1244\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = NonNull::&lt;AlignedI32&gt;::from(<span class=\"kw-2\">&amp;</span>data);\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!NonNull::new(ptr.as_ptr().wrapping_byte_add(<span class=\"number\">1</span>)).unwrap().is_aligned());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned_to\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1282\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre></div>\n</div></details></div></details>",0,"erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#87\">Source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dangling\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.36.0\">1.25.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#111\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.dangling\" class=\"fn\">dangling</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> that is dangling, but well-aligned.</p>\n<p>This is useful for initializing types which lazily allocate, like\n<code>Vec::new</code> does.</p>\n<p>Note that the pointer value may potentially represent a valid pointer to\na <code>T</code>, which means this must not be used as a “not yet initialized”\nsentinel value. Types that lazily allocate must track initialization by\nsome other means.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::dangling();\n<span class=\"comment\">// Important: don't try to access the value of `ptr` without\n// initializing it first! The pointer is not null but isn't valid either!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#136\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; &amp;'a <a class=\"union\" href=\"https://doc.rust-lang.org/beta/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared references to the value. In contrast to <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.\nNote that because the created reference is to <code>MaybeUninit&lt;T&gt;</code>, the\nsource pointer can point to uninitialized memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#159\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_mut\" class=\"fn\">as_uninit_mut</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"union\" href=\"https://doc.rust-lang.org/beta/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique references to the value. In contrast to <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that\nthe pointer is <a href=\"https://doc.rust-lang.org/beta/core/ptr/index.html#pointer-to-reference-conversion\" title=\"mod core::ptr\">convertible to a reference</a>.\nNote that because the created reference is to <code>MaybeUninit&lt;T&gt;</code>, the\nsource pointer can point to uninitialized memory.</p>\n</div></details></div></details>",0,"erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1589\">Source</a></span><a href=\"#impl-Ord-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1592\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/beta/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1580\">Source</a></span><a href=\"#impl-PartialEq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1583\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1598\">Source</a></span><a href=\"#impl-PartialOrd-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1601\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1335\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1353\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/beta/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","erasable::ErasedPtr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1570\">Source</a></span><a href=\"#impl-Pointer-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1571\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/beta/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/beta/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/beta/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","erasable::ErasedPtr"],["<section id=\"impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1550\">Source</a><a href=\"#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<NonNull<U>>","erasable::ErasedPtr"],["<section id=\"impl-Copy-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1547\">Source</a></span><a href=\"#impl-Copy-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","erasable::ErasedPtr"],["<section id=\"impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1553\">Source</a><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<NonNull<U>>","erasable::ErasedPtr"],["<section id=\"impl-Eq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1577\">Source</a></span><a href=\"#impl-Eq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","erasable::ErasedPtr"],["<section id=\"impl-PinCoerceUnsized-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1556\">Source</a></span><a href=\"#impl-PinCoerceUnsized-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","erasable::ErasedPtr"],["<section id=\"impl-PointerLike-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#1560\">Source</a><a href=\"#impl-PointerLike-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.PointerLike.html\" title=\"trait core::marker::PointerLike\">PointerLike</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h3></section>","PointerLike","erasable::ErasedPtr"],["<section id=\"impl-Send-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#80\">Source</a></span><a href=\"#impl-Send-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Send</code> because the data they reference may be aliased.</p>\n</div></section>","Send","erasable::ErasedPtr"],["<section id=\"impl-Sync-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/ptr/non_null.rs.html#85\">Source</a></span><a href=\"#impl-Sync-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Sync</code> because the data they reference may be aliased.</p>\n</div></section>","Sync","erasable::ErasedPtr"],["<section id=\"impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/beta/src/core/panic/unwind_safe.rs.html#191\">Source</a></span><a href=\"#impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/beta/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/beta/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","erasable::ErasedPtr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[120392]}