name: CI
on:
  push:
    branches:
      - staging
      - trying

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          profile: minimal
          override: true

      - name: Cargo target cache
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Compile
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets --examples --no-run

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets --examples

      - name: Prepare build directory for cache
        run: |
          find ./target/debug -maxdepth 1 -type f -delete \
          && rm -fr ./target/debug/{deps,.fingerprint}/{*erasable*,*ptr-union*,*rc-borrow*,*rc-box*,*slice-dst*} \
          && rm -f  ./target/.rustc_info.json

  msrv-tests:
    name: MSRV Tests
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2019-01-01
          profile: minimal
          override: true

      - name: Cargo target cache
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-msrv-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: -Z
          args: generate-lockfile

      - name: Compile
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all --all-targets --examples --no-run

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all --all-targets --examples

      - name: Prepare build directory for cache
        run: |
          find ./target/debug -maxdepth 1 -type f -delete \
          && rm -fr ./target/debug/{deps,.fingerprint}/{*erasable*,*ptr-union*,*rc-borrow*,*rc-box*,*slice-dst*} \
          && rm -f  ./target/.rustc_info.json

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
          components: rustfmt

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  check:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          override: true
          components: clippy

      - name: Check style
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all --all-targets

  miri:
    name: Miri
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: miri

      - name: Cargo target cache
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-miri-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Miri setup
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: setup

      # cargo-miri does not support workspaces yet [rust-lang/miri#1001]
      # so run `cargo miri test` in each crate directory manually.
      # We don't seem to be able to change the working directory of actions-rc/cargo.
      - name: Miri test erasable
        working-directory: ./crates/erasable
        run: cargo miri test --all-features

      - name: Miri test ptr-union
        working-directory: ./crates/ptr-union
        run: cargo miri test --all-features

      - name: Miri test rc-borrow
        working-directory: ./crates/rc-borrow
        run: cargo miri test --all-features

      - name: Miri test rc-box
        working-directory: ./crates/rc-box
        run: cargo miri test --all-features

      - name: Miri test slice-dst
        working-directory: ./crates/slice-dst
        run: cargo miri test --all-features

      - name: Prepare build directory for cache
        run: |
          find ./target/debug -maxdepth 1 -type f -delete \
          && rm -fr ./target/debug/{deps,.fingerprint}/{*erasable*,*ptr-union*,*rc-borrow*,*rc-box*,*slice-dst*} \
          && rm -f  ./target/.rustc_info.json
